Algorithms to be implemented using a subset of a chosen programming language:

1. Sum of First N Numbers (workssss)
	•	Description: Calculate the sum of the first N natural numbers using loop.
	•	Example:
          Input: N = 10
          Output: 55

INPUT:
func sumOfFirstN(_ n: Int) -> Int {
    var sum = 0
    for i in 1...n {
        sum += i
    }
    return sum
}
OUTPUT:
public static int  sumOfFirstN( int n) {
int sum =  0;
for (int i = 1; i <= n ; i++) {
sum += i;
}
return sum;
}

2. Factorial of N (worksss)
	•	Description: Compute the factorial of a given number N.
	•	Example:
          Input: N = 5
          Output: 120

INPUT:
func factorial(_ n: Int) -> Int {
    return n == 0 ? 1 : n * factorial(n - 1)
}
OUTPUT:
public static int  factorial( int n) {
return n == 0 ? 1 : n * factorial(n - 1);
}

3. GCD of Two Numbers (worksss)
	•	Description: Find the greatest common divisor (GCD) of two integers using the Euclidean algorithm.
	•	Example:
          Input: a = 48, b = 18
          Output: 6
INPUT:
func gcd(_ a: Int, _ b: Int) -> Int {
    return b == 0 ? a : gcd(b, a % b)
}
OUTPUT:
public static int  gcd( int a,  int b) {
return b == 0 ? a : gcd(b, a % b);
}

4. Reverse a Number (workss)
	•	Description: Reverse the digits of an integer.
	•	Example:
          Input: 1234
          Output: 4321
INPUT:
func reverseNumber(_ n: Int) -> Int {
    var n = n
    var reversed = 0
    while n != 0 {
        let digit = n % 10
        reversed = reversed * 10 + digit
        n /= 10
    }
    return reversed
}
OUTPUT:
public static int  reverseNumber( int n) {
int n =  n;
int reversed =  0;
while ( n != 0 ) {
final int digit =  n % 10;
reversed = reversed * 10 + digit;
n /= 10;
}
return reversed;
}


5. Check if a Number is Prime (workss)
	•	Description: Determine if a given number N is a prime number.
	•	Example:
          Input: N = 13
          Output: True

INPUT:
func isPrime(_ n: Int) -> Bool {
    if n <= 1 { return false }
    for i in 2..<n {
        if n % i == 0 { return false }
    }
    return true
}
OUTPUT:
public static boolean  isPrime( int n) {
if (n <= 1 ) { return false }
for (int i = 2; i < n ; i++) {
if (n % i == 0 ) { return false }
}
return true;
}

6. Check if a Number is Palindrome (worksss)
	•	Description: Check if an integer reads the same backward and forward.
	•	Example:
          Input: 121
          Output: True

INPUT:
func isPalindrome(_ n: Int) -> Bool {
    var original = n
    var reversed = 0
    var num = n
    
    while num > 0 {
        let digit = num % 10
        reversed = reversed * 10 + digit
        num /= 10
    }
    
    return original == reversed
}
OUTPUT:
public static boolean  isPalindrome( int n) {
int original =  n;
int reversed =  0;
int num =  n;
while ( num > 0 ) {
final int digit =  num % 10;
reversed = reversed * 10 + digit;
num /= 10;
}
return original == reversed;
}

7. Find the Largest Digit in a Number (worksss)
	•	Description: Identify the largest digit in a given integer.
	•	Example:
          Input: n = 3947
          Output: 9

INPUT:
func largestDigit(_ n: Int) -> Int {
    var n = n
    var maxDigit = 0
    while n > 0 {
        maxDigit = max(maxDigit, n % 10)
        n /= 10
    }
    return maxDigit
}
OUTPUT:
public static int  largestDigit( int n) {
int n =  n;
int maxDigit =  0;
while ( n > 0 ) {
maxDigit = Math.max(maxDigit, n % 10);
n /= 10;
}
return maxDigit;
}

8. Sum of Digits (worksss)
	•	Description: Calculate the sum of the digits of a number.
	•	Example:
          Input: 1234
          Output: 10

INPUT:
func sumOfDigits(_ n: Int) -> Int {
    var n = n
    var sum = 0
    while n != 0 {
        sum += n % 10
        n /= 10
    }
    return sum
}
OUTPUT:
public static int  sumOfDigits( int n) {
int n =  n;
int sum =  0;
while ( n != 0 ) {
sum += n % 10;
n /= 10;
}
return sum;
}

9. Multiplication Table (worksss)
	•	Description: Generate and print the multiplication table for a given number up to 10.
	•	Example:
          Input: 5
          Output:

5
10
15
20
25
30
35
40
45
50

INPUT:
func multiplicationTable(_ n: Int) {
    for i in 1...10 {
        print(n * i)
    }
}
OUTPUT:
public static void multiplicationTable( int n) {
for (int i = 1; i <= 10 ; i++) {
System.out.println(n * i);
}
}


10. Nth Fibonacci Number
	•	Description: Compute the Nth Fibonacci number using iteration or recursion.
	•	Example:
          Input: N = 10
          Output: 34

INPUT:
func fibonacci(_ n: Int) -> Int {
    if n <= 1 { return n }
    return fibonacci(n - 1) + fibonacci(n - 2)
}
OUTPUT:
public static int  fibonacci( int n) {
if (n <= 1 ) { return n }
return fibonacci(n - 1) + fibonacci(n - 2);
}
